@inject HttpClient Http
@using Newtonsoft.Json;
@using Real.Time.Chat.Shared.Kernel.Entity;
@using Real.Time.Chat.Web.Data; 
@inject Blazored.LocalStorage.ILocalStorageService LocalStore
@inject NavigationManager UriHelper;

@page "/login"

<div class="container">
    Real Time Chat Application
    <div class="form-group">
        <label for="username">Username</label>
        <input type="text" name="username" class="form-control" @bind="@username" />
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <input type="password" class="form-control" name="password" @bind="@password" />
    </div>

    <button class="btn btn-primary" @onclick="DoLogin">Log In</button>
    <button class="btn btn-secondary" @onclick="NavigatetoNextComponent">Register</button>
    <span class="text-danger">@loginErrorMessage</span>
</div>

@code {
    string username = string.Empty;
    string password = string.Empty;
    string loginErrorMessage = string.Empty;

    protected async Task DoLogin()
    {
        var response = await new ChatService().Login(username, password);
        var actionResult = JsonConvert.DeserializeObject<ApiOkReturn>(await response.Content.ReadAsStringAsync());
        var token = JsonConvert.DeserializeObject<TokenJWT>(JsonConvert.SerializeObject(actionResult?.Data));
        if (token != null)
        {
            await LocalStore.SetItemAsync("token", token.Token);
            await LocalStore.SetItemAsync("username", username);
            UriHelper.NavigateTo("Home");
        }
        else
            loginErrorMessage = "Unauthorized. Are you registered?";
    }

    void NavigatetoNextComponent()
    {
        UriHelper.NavigateTo("Register");
    }
}